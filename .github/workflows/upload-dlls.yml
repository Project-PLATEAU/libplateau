
# github actions でビルドしてDLL等の成果物をアップロードする手順です。

name: Upload DLLs

# 手動でgithubサイトのボタンを押したときか、タグを作ったときに実行します。
on:
  push:
  #workflow_dispatch:
  #create:
  #  tags: '*'

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  # 1つ目のジョブです。
  # OS別にビルドして、それぞれの成果物をアーティファクトとして保存します。
  upload-dlls:

    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-18.04]

    steps:

      - uses: actions/checkout@v3

      - name: Add SSH private keys for submodule repositories
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.KEY_TO_ACCESS_FBXSDK }}

      - name: checkout submodules
        shell: bash
        run: git submodule update --init --recursive

      - name: Build
        uses: ./.github/actions/build
        with:
          shell_type: ${{ (runner.os == 'Windows' && 'powershell') || 'bash' }}

      - name: Copy DLL for Windows
        if: runner.os == 'Windows'
        run: |
          mkdir D:\a\output -Force
          Copy-Item -Filter "*.dll" -Path ${{github.workspace}}\out\build\x64-Release\bin\* -Destination D:\a\output
          Copy-Item -Path ${{github.workspace}}\wrappers\csharp\LibPLATEAU.NET\CSharpPLATEAU\bin\Release\netstandard2.0\CSharpPLATEAU.dll -Destination D:\a\output

      - name: Copy lib for Windows
        if: runner.os == 'Windows'
        run: |
          Copy-Item -Path ${{ github.workspace }}\out\build\x64-Release\3rdparty\libcitygml\lib\citygml.lib -Destination D:\a\output
          Copy-Item -Path ${{ github.workspace }}\out\build\x64-Release\src\plateau.lib -Destination D:\a\output

      - name: Upload DLL for Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: libplateau-windows-dll
          path: D:\a\output

      - name: Copy Libraries for Ubuntu and MacOS
        if: runner.os != 'Windows'
        run: |
          mkdir $HOME/output/
          find ${{github.workspace}}/out/build/x64-Release -name *.so -or -name *.dylib -or -name libcitygml.a | xargs -I {} cp -v {} $HOME/output
          echo "HOME=$(echo $HOME)" >> $GITHUB_ENV

      - name: Upload DLL(so, dylib) for Ubuntu and MacOS
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: libplateau-${{matrix.os}}-dll
          path: ${{env.HOME}}/output/

  # 2つ目のジョブ。
  # Android用にライブラリをビルド。
  upload_android_dlls:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        compile-sdk: [33]
        build-tools: [30.0.3]
        ndk-version: [23.1.7779620]
        cmake-version: [3.22.0]
        root-project-path: [./AndroidNDK]

    steps:
      - uses: actions/checkout@v3

      - name: Add SSH private keys for submodule repositories
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.KEY_TO_ACCESS_FBXSDK }}

      - name: checkout submodules
        shell: bash
        run: git submodule update --init --recursive









      - name: setup ubuntu
        run: |
          sudo apt-get --quiet update --yes
          sudo apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
      - name: setup JDK 1.8
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: download Android SDK
        #working-directory: ${{ matrix.root-project-path }}
        run: |
          wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-8092744_latest.zip
          unzip -d android-sdk-linux android-sdk.zip
          sudo mkdir -p /root/.android
          sudo touch /root/.android/repositories.cfg
          echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. "platforms;android-${{ matrix.compile-sdk }}" >/dev/null
          echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. "platform-tools" >/dev/null
          echo y | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. "build-tools;${{ matrix.build-tools }}" >/dev/null
          export ANDROID_SDK_ROOT=$PWD
          export PATH=$PATH:$PWD/platform-tools/
          chmod +x ./gradlew
          set +o pipefail
          yes | android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. --licenses
          set -o pipefail
      - name: install Android NDK
        #working-directory: ${{ matrix.root-project-path }}
        run: android-sdk-linux/cmdline-tools/bin/sdkmanager --sdk_root=. --install "ndk;${{ matrix.ndk-version }}" "cmake;${{ matrix.cmake-version }}"
      - name: Insert NDK path
        #working-directory: ${{ matrix.root-project-path }}
        run: |
          echo "ndk.dir=$PWD/ndk/${{ matrix.ndk-version }}" >> ./local.properties







  # 3つ目のジョブ。
  # iOS用にライブラリをビルド。
  upload_ios_dlls:

    runs-on: macos-latest

    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Add SSH private keys for submodule repositories
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
            ${{ secrets.KEY_TO_ACCESS_FBXSDK }}

      - name: checkout submodules
        shell: bash
        run: git submodule update --init --recursive








  # 4つ目のジョブです。
  # OSごとのアーティファクトを1つにまとめます。
  sum-up-dlls:
    runs-on: ubuntu-latest
    needs: upload-dlls

    steps:
      - name: download-all-artifacts
        uses: actions/download-artifact@v2
        with:
          path: ~/a

      - name: sum-up-dynamic-libs
        run: |
          mkdir -p ~/a/plateau-plugins/dynamic-libs/Windows/x86_64
          mkdir -p ~/a/plateau-plugins/dynamic-libs/Linux/x86_64
          mkdir -p ~/a/plateau-plugins/dynamic-libs/MacOS/x86_64
          mkdir -p ~/a/plateau-plugins/dynamic-libs/ManagedDLL
          cp ~/a/libplateau-windows-dll/plateau.dll ~/a/plateau-plugins/dynamic-libs/Windows/x86_64
          cp ~/a/libplateau-windows-dll/CSharpPLATEAU.dll ~/a/plateau-plugins/dynamic-libs/ManagedDLL
          cp ~/a/libplateau-ubuntu-18.04-dll/*.so ~/a/plateau-plugins/dynamic-libs/Linux/x86_64
          cp ~/a/libplateau-macos-latest-dll/*.dylib ~/a/plateau-plugins/dynamic-libs/MacOS/x86_64

      - name: sum-up-static-libs
        run: |
          mkdir -p ~/a/plateau-plugins/static-libs/windows
          mkdir -p ~/a/plateau-plugins/static-libs/linux
          mkdir -p ~/a/plateau-plugins/static-libs/macos
          cp ~/a/libplateau-windows-dll/*.lib ~/a/plateau-plugins/static-libs/windows
          cp ~/a/libplateau-ubuntu-18.04-dll/*.a ~/a/plateau-plugins/static-libs/linux
          cp ~/a/libplateau-macos-latest-dll/*.a ~/a/plateau-plugins/static-libs/macos

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: all-libraries
          path: ~/a/plateau-plugins
          
